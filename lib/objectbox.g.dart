// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/pages/dinamic_tasks/groups.dart';
import 'src/pages/dinamic_tasks/tasks.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6506906022655697584),
      name: 'Groups',
      lastPropertyId: const IdUid(3, 1514934629981195697),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5762684504580967041),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1864006060202379886),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1514934629981195697),
            name: 'color',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'tasks', srcEntity: 'Tasks', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 8219711764999046108),
      name: 'Tasks',
      lastPropertyId: const IdUid(4, 766828151250647703),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9133314694379026687),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1226268913930030492),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3943490936842541466),
            name: 'completed',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 766828151250647703),
            name: 'groupId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 5834728413317329384),
            relationTarget: 'Groups')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 8219711764999046108),
      lastIndexId: const IdUid(1, 5834728413317329384),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Groups: EntityDefinition<Groups>(
        model: _entities[0],
        toOneRelations: (Groups object) => [],
        toManyRelations: (Groups object) => {
              RelInfo<Tasks>.toOneBacklink(
                      4, object.id, (Tasks srcObject) => srcObject.group):
                  object.tasks
            },
        getId: (Groups object) => object.id,
        setId: (Groups object, int id) {
          object.id = id;
        },
        objectToFB: (Groups object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.color);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Groups(
              color: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(
              object.tasks,
              store,
              RelInfo<Tasks>.toOneBacklink(
                  4, object.id, (Tasks srcObject) => srcObject.group),
              store.box<Groups>());
          return object;
        }),
    Tasks: EntityDefinition<Tasks>(
        model: _entities[1],
        toOneRelations: (Tasks object) => [object.group],
        toManyRelations: (Tasks object) => {},
        getId: (Tasks object) => object.id,
        setId: (Tasks object, int id) {
          object.id = id;
        },
        objectToFB: (Tasks object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descriptionOffset);
          fbb.addBool(2, object.completed);
          fbb.addInt64(3, object.group.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Tasks(
              completed:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.group.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.group.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Groups] entity fields to define ObjectBox queries.
class Groups_ {
  /// see [Groups.id]
  static final id = QueryIntegerProperty<Groups>(_entities[0].properties[0]);

  /// see [Groups.name]
  static final name = QueryStringProperty<Groups>(_entities[0].properties[1]);

  /// see [Groups.color]
  static final color = QueryIntegerProperty<Groups>(_entities[0].properties[2]);
}

/// [Tasks] entity fields to define ObjectBox queries.
class Tasks_ {
  /// see [Tasks.id]
  static final id = QueryIntegerProperty<Tasks>(_entities[1].properties[0]);

  /// see [Tasks.description]
  static final description =
      QueryStringProperty<Tasks>(_entities[1].properties[1]);

  /// see [Tasks.completed]
  static final completed =
      QueryBooleanProperty<Tasks>(_entities[1].properties[2]);

  /// see [Tasks.group]
  static final group =
      QueryRelationToOne<Tasks, Groups>(_entities[1].properties[3]);
}
